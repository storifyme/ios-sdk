// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name StorifyMe
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
import SDWebImage
import Swift
import UIKit
import UIKit.UILabel
import UIKit.UIViewController
import WebKit
import _Concurrency
import _StringProcessing
extension UIKit.UIColor {
  convenience public init(hex: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class StoriesCollectionView : UIKit.UICollectionView {
  @_Concurrency.MainActor(unsafe) weak public var eventDelegate: StorifyMe.StoryEventProtocol?
  @objc deinit
}
extension StorifyMe.StoriesCollectionView : UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var numberOfSections: Swift.Int {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
}
extension StorifyMe.StoriesCollectionView : UIKit.UICollectionViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
extension StorifyMe.StoriesCollectionView : StorifyMe.StoryEventProtocol {
  @_Concurrency.MainActor(unsafe) public func onLoad(stories: [StorifyMe.StoryModel])
  @_Concurrency.MainActor(unsafe) public func onFail(error: Swift.Error)
  @_Concurrency.MainActor(unsafe) public func onStoryOpened(story: StorifyMe.StoryModel?, index: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func onStoryClose(story: StorifyMe.StoryModel?)
  @_Concurrency.MainActor(unsafe) public func onAction(type: Swift.String, data: [Swift.String : Any]?)
  @_Concurrency.MainActor(unsafe) public func onEvent(type: Swift.String, data: [Swift.String : Any]?)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class StoryView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak public var eventDelegate: StorifyMe.StoryEventProtocol? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak public var sizeDelegate: StorifyMe.StoryfyMeSizeProtocol?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) public func setWidgetConfig(config: StorifyMe.WidgetConfig)
  @_Concurrency.MainActor(unsafe) public func load()
  @_Concurrency.MainActor(unsafe) public func setWidgetId(widgetId: Swift.String)
  @objc deinit
}
extension StorifyMe.StoryView : StorifyMe.WidgetCustimizationProtocol {
  @_Concurrency.MainActor(unsafe) public func setStoryImageStyle(imageStyle: StorifyMe.StoryImageStyle)
  @_Concurrency.MainActor(unsafe) public func setWidgetBackgroundColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setWidgetBorderWidth(dimension: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func setWidgetBorderColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setWidgetBorderRadius(dimension: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func setWidgetTitleStyle(widgetTitleStyle: StorifyMe.WidgetTitleStyle)
  @_Concurrency.MainActor(unsafe) public func setWidgetTitleBorderWidth(dimension: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func setWidgetTitleBorderColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setWidgetInnerHorizontalPadding(padding: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func setWidgetInnerVerticalPadding(padding: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func setItemTextStyle(textStyle: StorifyMe.StoryTextStyle)
  @_Concurrency.MainActor(unsafe) public func setStoryLiveStyle(options: StorifyMe.StoryLiveStyleOptions)
  @_Concurrency.MainActor(unsafe) public func setStorySeenStyle(options: StorifyMe.StorySeenStyleOptions)
}
@_hasMissingDesignatedInitializers public class StorifyMeInstance {
  public static let shared: StorifyMe.StorifyMeInstance
  public func initialization(apiKey: Swift.String, accountId: Swift.String)
  @objc deinit
}
public protocol StoryfyMeSizeProtocol : AnyObject {
  func heightForStoryView(size: CoreFoundation.CGFloat)
}
public struct CubeAttributesAnimator : StorifyMe.LayoutAttributesAnimator {
  public var perspective: CoreFoundation.CGFloat
  public var totalAngle: CoreFoundation.CGFloat
  public init(perspective: CoreFoundation.CGFloat = -1 / 500, totalAngle: CoreFoundation.CGFloat = .pi / 2)
  public func animate(collectionView: UIKit.UICollectionView, attributes: StorifyMe.AnimatedCollectionViewLayoutAttributes)
}
public struct StoryLiveStyleOptions {
  public let label: Swift.String?
  public let background: UIKit.UIColor?
  public let labelColor: UIKit.UIColor?
  public let labelTextSize: Swift.Int?
  public let verticalPadding: CoreFoundation.CGFloat?
  public let horizontalPadding: CoreFoundation.CGFloat?
  public let cornerRadius: CoreFoundation.CGFloat?
  public let borderWidth: Swift.Int?
  public let borderColor: UIKit.UIColor?
  public init(label: Swift.String? = nil, background: UIKit.UIColor? = nil, labelColor: UIKit.UIColor? = nil, labelTextSize: Swift.Int? = nil, borderWidth: Swift.Int? = nil, borderColor: UIKit.UIColor? = nil, horizontalPadding: CoreFoundation.CGFloat? = nil, verticalPadding: CoreFoundation.CGFloat? = nil, cornerRadius: CoreFoundation.CGFloat? = nil)
}
public struct StoryTextStyle {
  public init(titleIsVisible: Swift.Bool, titleFont: UIKit.UIFont, titleSize: CoreFoundation.CGFloat, titleColor: UIKit.UIColor)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class AnimatedCollectionViewLayout : UIKit.UICollectionViewFlowLayout {
  @_Concurrency.MainActor(unsafe) open var animator: StorifyMe.LayoutAttributesAnimator?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open class var layoutAttributesClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutAttributesForElements(in rect: CoreFoundation.CGRect) -> [UIKit.UICollectionViewLayoutAttributes]?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func shouldInvalidateLayout(forBoundsChange newBounds: CoreFoundation.CGRect) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class AnimatedCollectionViewLayoutAttributes : UIKit.UICollectionViewLayoutAttributes {
  @_Concurrency.MainActor(unsafe) public var contentView: UIKit.UIView?
  @_Concurrency.MainActor(unsafe) public var scrollDirection: UIKit.UICollectionView.ScrollDirection
  @_Concurrency.MainActor(unsafe) public var startOffset: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var middleOffset: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var endOffset: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @objc deinit
}
public struct StorySeenStyleOptions {
  public let opacity: CoreFoundation.CGFloat?
  public let borderWidth: Swift.Int?
  public let borderColor: UIKit.UIColor?
  public init(opacity: CoreFoundation.CGFloat? = nil, borderWidth: Swift.Int? = nil, borderColor: UIKit.UIColor? = nil)
}
public struct StorifyMeAccount {
  public init(accountId: Swift.String, apiKey: Swift.String)
}
public enum ImageShape {
  case circle
  case square
  public static func == (a: StorifyMe.ImageShape, b: StorifyMe.ImageShape) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct WidgetConfig {
  public init()
  public mutating func setQueryParameter(name: Swift.String, value: Swift.String)
  public mutating func setSegments(tags: [Swift.String])
}
public protocol StoryEventProtocol : AnyObject {
  func onLoad(stories: [StorifyMe.StoryModel])
  func onFail(error: Swift.Error)
  func onStoryOpened(story: StorifyMe.StoryModel?, index: Swift.Int)
  func onStoryClose(story: StorifyMe.StoryModel?)
  func onAction(type: Swift.String, data: [Swift.String : Any]?)
  func onEvent(type: Swift.String, data: [Swift.String : Any]?)
}
public protocol LayoutAttributesAnimator {
  func animate(collectionView: UIKit.UICollectionView, attributes: StorifyMe.AnimatedCollectionViewLayoutAttributes)
}
public struct StoryImageStyle {
  public init(imageHeight: Swift.Int, imageWidth: Swift.Int, imageRadius: Swift.Int, imageBorderWidth: Swift.Int, imageBorderColor: UIKit.UIColor)
  public init(imageShape: StorifyMe.ImageShape)
}
public struct StoryModel : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct WidgetTitleStyle {
  public init(titleIsVisible: Swift.Bool, titleFont: UIKit.UIFont, titleSize: CoreFoundation.CGFloat, titleColor: UIKit.UIColor, titleAlign: UIKit.NSTextAlignment)
}
extension StorifyMe.WidgetTitleStyle : Swift.Equatable {
  public static func == (lhs: StorifyMe.WidgetTitleStyle, rhs: StorifyMe.WidgetTitleStyle) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class PreviewStoryByHandleLauncher {
  public static let shared: StorifyMe.PreviewStoryByHandleLauncher
  public func launch(handle: Swift.String, storyEventDelegate: StorifyMe.StoryEventProtocol? = nil)
  @objc deinit
}
public protocol WidgetCustimizationProtocol {
  func setWidgetBackgroundColor(color: UIKit.UIColor)
  func setWidgetBorderWidth(dimension: CoreFoundation.CGFloat)
  func setWidgetBorderColor(color: UIKit.UIColor)
  func setWidgetBorderRadius(dimension: CoreFoundation.CGFloat)
  func setWidgetTitleStyle(widgetTitleStyle: StorifyMe.WidgetTitleStyle)
  func setWidgetTitleBorderWidth(dimension: Swift.Int)
  func setWidgetTitleBorderColor(color: UIKit.UIColor)
  func setWidgetInnerHorizontalPadding(padding: CoreFoundation.CGFloat)
  func setWidgetInnerVerticalPadding(padding: CoreFoundation.CGFloat)
  func setStoryImageStyle(imageStyle: StorifyMe.StoryImageStyle)
  func setItemTextStyle(textStyle: StorifyMe.StoryTextStyle)
  func setStoryLiveStyle(options: StorifyMe.StoryLiveStyleOptions)
  func setStorySeenStyle(options: StorifyMe.StorySeenStyleOptions)
}
extension StorifyMe.ImageShape : Swift.Equatable {}
extension StorifyMe.ImageShape : Swift.Hashable {}
